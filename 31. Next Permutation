class Solution {
  /* public int leastPermutation(int[] nums, int start, int end){
        int low = start;   /////快速排序
        int high = end;
        int pivot = nums[start];
        int temp = 0;
        int length = nums.length;
        int pivotPosition = 0;
        int a1,a2;
        
        if(start==end)
            return -1;
        
        while (low < high)
        {
            while(  low<high && nums[high] >= pivot )
                --high;
            nums[low] = nums[high];
            while( low<high && nums[low] <= pivot )
                ++low;
            nums[high] = nums[low];
        }
        nums[low] = pivot;
        pivotPosition = low;
        a1 = leastPermutation(nums, 0, low-1);
        a2 = leastPermutation(nums, pivotPosition+1, length-1);
        return 0;
    }*/
    
    public void swapArray(int[] nums, int index1, int index2)
    {
        int temp = 0;
        temp = nums[index1];////记录交换的数字大小
        nums[index1] = nums[index2];
        nums[index2] = temp;
    }
    
    
    public void nextPermutation(int[] nums) {
        int a = 0;
        //int min = nums[nums.length-1]; //已经从后往前遍历的数组里面最小的值
        //int exchangePosition = nums.length-2;
        int flag = 0;
        // int a1,a2;
        Loop1:
        for ( int i=nums.length-1; i>0; i-- )
        {
            if( nums[i] > nums[i-1] )
            {
                a = nums[i-1];
            
                swapArray( nums, i, i-1 );
                flag = 1;
                for ( int j = i; j<nums.length; j++)
                {
                    int min = a;
                    if(nums[j]<nums[i-1] && nums[j]>a)
                    {
                        swapArray(nums, i-1, j);
                        //Arrays.sort( nums, i, nums.length );
                        //flag=1;
                        //break Loop1;
                        
                    }
                }
                Arrays.sort( nums, i, nums.length );
                break;
            }   
        }
        if (flag==0)
            Arrays.sort( nums, 0, nums.length );
    }
}
